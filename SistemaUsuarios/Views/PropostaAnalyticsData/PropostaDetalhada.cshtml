@model SistemaUsuarios.Models.ViewModels.Analytics.PropostaAnalyticsDetalhadaViewModel
@{
    ViewData["Title"] = $"Analytics - {Model.Proposta.Titulo}";
}

<!-- Leaflet CSS -->
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />

<!-- Header Executivo -->
<div class="executive-analytics-header">
    <div class="header-content">
        <div class="header-title">
            <h1><i class="fas fa-chart-bar me-2"></i>Analytics Executivo</h1>
            <h2 class="proposal-title">@Model.Proposta.Titulo</h2>
            <div class="proposal-meta">
                <span class="meta-item">
                    <i class="fas fa-calendar me-1"></i>
                    Criada em @Model.Proposta.DataCriacao.ToString("dd/MM/yyyy")
                </span>
                <span class="meta-item">
                    <i class="fas fa-eye me-1"></i>
                    @Model.EstatisticasGerais.TotalVisualizacoes visualizações
                </span>
                <span class="meta-item">
                    <i class="fas fa-clock me-1"></i>
                    @(Model.EstatisticasGerais.TempoMedioSegundos.ToString("F0"))s médio
                </span>
                @if (Model.Proposta.LinkPublicoAtivo)
                {
                    <span class="meta-item">
                        <i class="fas fa-link me-1"></i>
                        <span class="text-success">Link Ativo</span>
                    </span>
                }
                else
                {
                    <span class="meta-item">
                        <i class="fas fa-link-slash me-1"></i>
                        <span class="text-danger">Link Inativo</span>
                    </span>
                }
            </div>
        </div>
        <div class="header-actions">
            <a href="/PropostaAnalyticsData/Dashboard" class="btn btn-outline-secondary">
                <i class="fas fa-arrow-left me-1"></i>Dashboard
            </a>
            <a href="/Proposta/Publico/@Model.Proposta.Id" target="_blank" class="btn btn-success">
                <i class="fas fa-external-link-alt me-1"></i>Ver Proposta
            </a>
            <button class="btn btn-primary" onclick="atualizarDados()">
                <i class="fas fa-sync me-1"></i>Atualizar
            </button>
        </div>
    </div>
</div>

<!-- Alert caso não tenha dados -->
@if (Model.EstatisticasGerais.TotalVisualizacoes == 0)
{
    <div class="alert alert-info executive-alert">
        <div class="alert-content">
            <i class="fas fa-info-circle alert-icon"></i>
            <div>
                <strong>Proposta ainda não visualizada</strong>
                <p class="mb-0">Esta proposta ainda não recebeu visualizações. <a href="/Proposta/Publico/@Model.Proposta.Id" target="_blank" class="alert-link">Clique aqui para testá-la</a>.</p>
            </div>
        </div>
    </div>
}

<!-- Informações da Proposta (Card Executivo) -->
<div class="executive-card proposal-info-card mb-4">
    <div class="card-header">
        <h3><i class="fas fa-info-circle me-2"></i>Informações da Proposta</h3>
        <span class="card-badge">ID: @Model.Proposta.Id</span>
    </div>
    <div class="card-content">
        <div class="proposal-info-grid">
            <div class="proposal-image">
                @if (!string.IsNullOrEmpty(Model.Proposta.FotoCapa))
                {
                    <img src="@Model.Proposta.FotoCapa" alt="Foto da Proposta" class="proposal-cover-image" />
                }
                else
                {
                    <div class="proposal-placeholder">
                        <i class="fas fa-image fa-3x"></i>
                        <p>Sem imagem</p>
                    </div>
                }
            </div>
            <div class="proposal-details">
                <div class="detail-grid">
                    <div class="detail-item">
                        <span class="detail-label">Status</span>
                        <span class="detail-value">
                            <span class="badge bg-info">@Model.Proposta.StatusProposta</span>
                        </span>
                    </div>
                    <div class="detail-item">
                        <span class="detail-label">Passageiros</span>
                        <span class="detail-value">@Model.Proposta.NumeroPassageiros + @Model.Proposta.NumeroCriancas</span>
                    </div>
                    @if (Model.EstatisticasGerais.TotalVisualizacoes > 0)
                    {
                        <div class="detail-item">
                            <span class="detail-label">Primeira Visualização</span>
                            <span class="detail-value">@(Model.EstatisticasGerais.PrimeiraVisualizacao?.ToString("dd/MM/yyyy HH:mm") ?? "N/A")</span>
                        </div>
                        <div class="detail-item">
                            <span class="detail-label">Última Visualização</span>
                            <span class="detail-value">@(Model.EstatisticasGerais.UltimaVisualizacao?.ToString("dd/MM/yyyy HH:mm") ?? "N/A")</span>
                        </div>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

<!-- KPIs Executivos -->
<div class="executive-kpis">
    <div class="kpi-card kpi-primary">
        <div class="kpi-icon">
            <i class="fas fa-eye"></i>
        </div>
        <div class="kpi-content">
            <div class="kpi-number">@Model.EstatisticasGerais.TotalVisualizacoes</div>
            <div class="kpi-label">Total de Visualizações</div>
            <div class="kpi-subtitle">@Model.EstatisticasGerais.VisualizacoesUnicas únicas</div>
        </div>
    </div>

    <div class="kpi-card kpi-success">
        <div class="kpi-icon">
            <i class="fas fa-clock"></i>
        </div>
        <div class="kpi-content">
            <div class="kpi-number">@(Model.EstatisticasGerais.TempoMedioSegundos.ToString("F0"))s</div>
            <div class="kpi-label">Tempo Médio</div>
            <div class="kpi-subtitle">de visualização</div>
        </div>
    </div>

    <div class="kpi-card kpi-warning">
        <div class="kpi-icon">
            <i class="fas fa-arrows-alt-v"></i>
        </div>
        <div class="kpi-content">
            <div class="kpi-number">@(Model.EstatisticasGerais.ScrollMedioPercentual.ToString("F0"))%</div>
            <div class="kpi-label">Scroll Médio</div>
            <div class="kpi-subtitle">da página</div>
        </div>
    </div>

    <div class="kpi-card kpi-info">
        <div class="kpi-icon">
            <i class="fas fa-mouse-pointer"></i>
        </div>
        <div class="kpi-content">
            <div class="kpi-number">@(Model.EstatisticasGerais.TaxaInteracao.ToString("F1"))%</div>
            <div class="kpi-label">Taxa de Interação</div>
            <div class="kpi-subtitle">@Model.EstatisticasGerais.TotalCliques cliques</div>
        </div>
    </div>

    <div class="kpi-card kpi-danger">
        <div class="kpi-icon">
            <i class="fab fa-whatsapp"></i>
        </div>
        <div class="kpi-content">
            <div class="kpi-number">@Model.EstatisticasGerais.CliquesWhatsApp</div>
            <div class="kpi-label">WhatsApp</div>
            <div class="kpi-subtitle">@Model.EstatisticasGerais.CliquesEmail email</div>
        </div>
    </div>
</div>

@if (Model.EstatisticasGerais.TotalVisualizacoes > 0)
{
    <!-- Dashboard Principal -->
    <div class="executive-dashboard">
        <!-- Mapa e Dispositivos -->
        <div class="dashboard-section">
            <div class="dashboard-primary">
                <div class="executive-card map-card">
                    <div class="card-header">
                        <h3><i class="fas fa-globe me-2"></i>Mapa de Visualizações</h3>
                        <span class="card-badge">@Model.MapaVisualizacoes.Count localizações</span>
                    </div>
                    <div class="card-content">
                        @if (Model.MapaVisualizacoes.Any())
                        {
                            <div id="mapaVisualizacoes" class="interactive-map"></div>
                            <div class="map-summary">
                                @foreach (var loc in Model.MapaVisualizacoes.Take(8))
                                {
                                    <div class="location-item">
                                        <div class="location-info">
                                            <i class="fas fa-map-marker-alt location-icon"></i>
                                            <span class="location-name">
                                                @if (!string.IsNullOrEmpty(loc.Cidade))
                                                {
                                                    @loc.Cidade@(!string.IsNullOrEmpty(loc.Estado) ? $", {loc.Estado}" : "")
                                                }
                                                else
                                                {
                                                    @loc.Pais
                                                }
                                            </span>
                                        </div>
                                        <div class="location-stats">
                                            <span class="stat-badge primary">@loc.Visualizacoes</span>
                                            <small class="stat-time">@(loc.TempoMedio.ToString("F0"))s</small>
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <div class="empty-state">
                                <i class="fas fa-map fa-3x"></i>
                                <h4>Sem dados de localização</h4>
                                <p>Geolocalização não foi autorizada pelos visitantes</p>
                            </div>
                        }
                    </div>
                </div>
            </div>

            <div class="dashboard-secondary">
                <!-- Dispositivos -->
                <div class="executive-card devices-card">
                    <div class="card-header">
                        <h3><i class="fas fa-devices me-2"></i>Dispositivos</h3>
                    </div>
                    <div class="card-content">
                        @if (Model.DispositivosENavegadores.Any())
                        {
                            <div class="chart-container">
                                <canvas id="graficoDispositivos"></canvas>
                            </div>
                            <div class="devices-list">
                                @foreach (var dispositivo in Model.DispositivosENavegadores.Take(5))
                                {
                                    <div class="device-item">
                                        <span class="device-name">@dispositivo.Categoria - @dispositivo.Subcategoria</span>
                                        <div class="device-stats">
                                            <span class="device-count">@dispositivo.Quantidade</span>
                                            <span class="device-percent">@(dispositivo.Percentual.ToString("F1"))%</span>
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <div class="empty-state small">
                                <i class="fas fa-desktop fa-2x"></i>
                                <p>Sem dados de dispositivos</p>
                            </div>
                        }
                    </div>
                </div>

                <!-- Interações -->
                <div class="executive-card interactions-card">
                    <div class="card-header">
                        <h3><i class="fas fa-hand-pointer me-2"></i>Interações</h3>
                    </div>
                    <div class="card-content">
                        <div class="interaction-stats">
                            <div class="interaction-item whatsapp">
                                <div class="interaction-icon">
                                    <i class="fab fa-whatsapp"></i>
                                </div>
                                <div class="interaction-data">
                                    <span class="interaction-count">@Model.EstatisticasGerais.CliquesWhatsApp</span>
                                    <span class="interaction-label">WhatsApp</span>
                                </div>
                            </div>
                            <div class="interaction-item email">
                                <div class="interaction-icon">
                                    <i class="fas fa-envelope"></i>
                                </div>
                                <div class="interaction-data">
                                    <span class="interaction-count">@Model.EstatisticasGerais.CliquesEmail</span>
                                    <span class="interaction-label">Email</span>
                                </div>
                            </div>
                        </div>
                        @if (Model.EstatisticasGerais.CliquesWhatsApp > 0 || Model.EstatisticasGerais.CliquesEmail > 0)
                        {
                            <div class="chart-container small">
                                <canvas id="graficoInteracoes"></canvas>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>

        <!-- Sessões de Usuários -->
        <div class="executive-card sessions-card">
            <div class="card-header">
                <h3><i class="fas fa-users me-2"></i>Sessões de Usuários</h3>
                <span class="card-badge">@Model.InteracoesUsuarios.Count sessões</span>
            </div>
            <div class="card-content">
                @if (Model.InteracoesUsuarios.Any())
                {
                    <div class="sessions-table">
                        <div class="table-header">
                            <div class="col-session">Sessão</div>
                            <div class="col-datetime">Data/Hora</div>
                            <div class="col-duration">Duração</div>
                            <div class="col-time">Tempo</div>
                            <div class="col-scroll">Scroll</div>
                            <div class="col-clicks">Cliques</div>
                            <div class="col-interactions">Interações</div>
                            <div class="col-device">Dispositivo</div>
                            <div class="col-location">Localização</div>
                        </div>
                        <div class="table-body">
                            @foreach (var sessao in Model.InteracoesUsuarios.Take(15))
                            {
                                <div class="table-row">
                                    <div class="col-session">
                                        <span class="session-id">
                                            @if (sessao.SessionToken.Length > 8)
                                            {
                                                @sessao.SessionToken.Substring(sessao.SessionToken.Length - 8)
                                            }
                                            else
                                            {
                                                @sessao.SessionToken
                                            }
                                        </span>
                                    </div>
                                    <div class="col-datetime">
                                        <span class="datetime-value">@sessao.DataHoraInicio.ToString("dd/MM HH:mm")</span>
                                        @if (sessao.DataHoraFim.HasValue)
                                        {
                                            <small class="datetime-end">até @sessao.DataHoraFim.Value.ToString("HH:mm")</small>
                                        }
                                    </div>
                                    <div class="col-duration">
                                        @if (sessao.DataHoraFim.HasValue)
                                        {
                                            var duracao = (sessao.DataHoraFim.Value - sessao.DataHoraInicio).TotalMinutes;
                                            <span class="duration-badge completed">@(duracao.ToString("F0"))min</span>
                                        }
                                        else
                                        {
                                            <span class="duration-badge ongoing">Em andamento</span>
                                        }
                                    </div>
                                    <div class="col-time">
                                        <span class="time-value">@sessao.TempoSegundos s</span>
                                    </div>
                                    <div class="col-scroll">
                                        <div class="progress-mini">
                                            <div class="progress-bar" style="width: @sessao.ScrollPercentual%"></div>
                                        </div>
                                        <span class="progress-text">@sessao.ScrollPercentual%</span>
                                    </div>
                                    <div class="col-clicks">
                                        <span class="clicks-count">@sessao.Cliques</span>
                                    </div>
                                    <div class="col-interactions">
                                        @if (sessao.ClicouWhatsApp)
                                        {
                                            <i class="fab fa-whatsapp text-success" title="WhatsApp"></i>
                                        }
                                        @if (sessao.ClicouEmail)
                                        {
                                            <i class="fas fa-envelope text-primary" title="Email"></i>
                                        }
                                        @if (!sessao.ClicouWhatsApp && !sessao.ClicouEmail)
                                        {
                                            <span class="no-interactions">-</span>
                                        }
                                    </div>
                                    <div class="col-device">
                                        @if (!string.IsNullOrEmpty(sessao.TipoDispositivo))
                                        {
                                            @if (sessao.TipoDispositivo.ToLower() == "mobile")
                                            {
                                                <i class="fas fa-mobile-alt device-icon mobile"></i>
                                            }
                                            else if (sessao.TipoDispositivo.ToLower() == "tablet")
                                            {
                                                <i class="fas fa-tablet-alt device-icon tablet"></i>
                                            }
                                            else
                                            {
                                                <i class="fas fa-desktop device-icon desktop"></i>
                                            }
                                            <span class="device-name">@sessao.TipoDispositivo</span>
                                        }
                                        else
                                        {
                                            <span class="no-data">-</span>
                                        }
                                    </div>
                                    <div class="col-location">
                                        @if (!string.IsNullOrEmpty(sessao.Cidade))
                                        {
                                            <i class="fas fa-map-marker-alt location-icon"></i>
                                            <span class="location-text">@sessao.Cidade@(!string.IsNullOrEmpty(sessao.Estado) ? $", {sessao.Estado}" : "")</span>
                                        }
                                        else if (!string.IsNullOrEmpty(sessao.Pais))
                                        {
                                            <i class="fas fa-globe location-icon"></i>
                                            <span class="location-text">@sessao.Pais</span>
                                        }
                                        else
                                        {
                                            <span class="no-data">-</span>
                                        }
                                    </div>
                                </div>
                            }
                        </div>
                    </div>

                    @if (Model.InteracoesUsuarios.Count > 15)
                    {
                        <div class="view-more">
                            <button class="btn btn-outline-primary" onclick="toggleMaisSessoes()">
                                <i class="fas fa-plus me-1"></i>Ver Todas as Sessões
                            </button>
                        </div>
                    }
                }
                else
                {
                    <div class="empty-state">
                        <i class="fas fa-users fa-2x"></i>
                        <h4>Nenhuma sessão registrada</h4>
                        <p>As sessões aparecerão aqui quando os usuários visualizarem a proposta</p>
                    </div>
                }
            </div>
        </div>

        <!-- Gráficos Avançados (Colapsável) -->
        <div class="executive-card charts-card">
            <div class="card-header">
                <button class="card-toggle" type="button" data-bs-toggle="collapse" data-bs-target="#advancedCharts">
                    <h3><i class="fas fa-chart-area me-2"></i>Análise Detalhada</h3>
                    <i class="fas fa-chevron-down toggle-icon"></i>
                </button>
            </div>
            <div class="collapse" id="advancedCharts">
                <div class="card-content">
                    <div class="charts-grid">
                        <!-- Visualizações por Dia -->
                        <div class="chart-section">
                            <h4>Visualizações por Dia</h4>
                            @if (Model.VisualizacoesPorDia.Any())
                            {
                                <canvas id="graficoVisualizacoesDia" class="chart-canvas"></canvas>
                            }
                            else
                            {
                                <div class="empty-state small">
                                    <i class="fas fa-chart-line fa-2x"></i>
                                    <p>Dados insuficientes</p>
                                </div>
                            }
                        </div>

                        <!-- Tempos de Sessão -->
                        <div class="chart-section">
                            <h4>Distribuição de Tempo</h4>
                            @if (Model.TemposPorSessao.Any())
                            {
                                <canvas id="graficoTemposSessao" class="chart-canvas"></canvas>
                            }
                            else
                            {
                                <div class="empty-state small">
                                    <i class="fas fa-chart-pie fa-2x"></i>
                                    <p>Sem dados de tempo</p>
                                </div>
                            }
                        </div>

                        <!-- Navegadores -->
                        <div class="chart-section">
                            <h4>Navegadores</h4>
                            @if (Model.DispositivosENavegadores.Any())
                            {
                                <canvas id="graficoNavegadores" class="chart-canvas"></canvas>
                            }
                            else
                            {
                                <div class="empty-state small">
                                    <i class="fas fa-globe fa-2x"></i>
                                    <p>Sem dados de navegadores</p>
                                </div>
                            }
                        </div>

                        <!-- Fontes de Tráfego -->
                        <div class="chart-section">
                            <h4>Fontes de Tráfego</h4>
                            @if (Model.ReferenciasTrafico.Any())
                            {
                                <div class="traffic-sources">
                                    @foreach (var referencia in Model.ReferenciasTrafico)
                                    {
                                        <div class="traffic-item">
                                            <div class="traffic-icon">
                                                @if (referencia.TipoReferencia?.ToLower() == "whatsapp")
                                                {
                                                    <i class="fab fa-whatsapp"></i>
                                                }
                                                else if (referencia.TipoReferencia?.ToLower() == "google")
                                                {
                                                    <i class="fab fa-google"></i>
                                                }
                                                else if (referencia.TipoReferencia?.ToLower() == "facebook")
                                                {
                                                    <i class="fab fa-facebook"></i>
                                                }
                                                else if (referencia.TipoReferencia?.ToLower() == "email")
                                                {
                                                    <i class="fas fa-envelope"></i>
                                                }
                                                else
                                                {
                                                    <i class="fas fa-globe"></i>
                                                }
                                            </div>
                                            <div class="traffic-info">
                                                <span class="traffic-name">@referencia.TipoReferencia</span>
                                                <div class="traffic-stats">
                                                    <span class="traffic-views">@referencia.Visualizacoes views</span>
                                                    <span class="traffic-time">@(referencia.TempoMedio.ToString("F0"))s</span>
                                                    <span class="traffic-rate">@(referencia.TaxaInteracao.ToString("F1"))%</span>
                                                </div>
                                            </div>
                                        </div>
                                    }
                                </div>
                            }
                            else
                            {
                                <div class="empty-state small">
                                    <i class="fas fa-share fa-2x"></i>
                                    <p>Acesso direto</p>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <!-- Estado sem dados -->
    <div class="executive-card no-data-card">
        <div class="card-content">
            <div class="no-data-state">
                <div class="no-data-icon">
                    <i class="fas fa-chart-bar"></i>
                </div>
                <h3>Aguardando primeiras visualizações</h3>
                <p>Esta proposta ainda não foi visualizada. Compartilhe o link para começar a coletar dados valiosos sobre o comportamento dos visitantes.</p>
                
                <div class="share-options">
                    <div class="share-link">
                        <input type="text" class="form-control" value="@(Context.Request.Scheme)://@(Context.Request.Host)/Proposta/Publico/@Model.Proposta.Id" id="linkProposta" readonly>
                        <button class="btn btn-outline-primary" onclick="copiarLinkProposta()">
                            <i class="fas fa-copy"></i>
                        </button>
                    </div>
                    <div class="share-actions">
                        <a href="/Proposta/Publico/@Model.Proposta.Id" target="_blank" class="btn btn-success">
                            <i class="fas fa-external-link-alt me-1"></i>Visualizar
                        </a>
                        <button class="btn btn-primary" onclick="compartilharWhatsApp()">
                            <i class="fab fa-whatsapp me-1"></i>Compartilhar
                        </button>
                    </div>
                </div>
            </div>
        </div>
    </div>
}

<!-- Scripts -->
<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

<script>
    // Dados do servidor
    const dadosVisualizacoesDia = @Html.Raw(Json.Serialize(Model.VisualizacoesPorDia));
    const dadosDispositivos = @Html.Raw(Json.Serialize(Model.DispositivosENavegadores));
    const dadosTemposSessao = @Html.Raw(Json.Serialize(Model.TemposPorSessao));
    const estatisticasGerais = @Html.Raw(Json.Serialize(Model.EstatisticasGerais));
    const dadosMapaVisualizacoes = @Html.Raw(Json.Serialize(Model.MapaVisualizacoes));

    // Variável global para o mapa
    let mapaInterativo = null;

    // Inicializar Mapa Interativo
    function inicializarMapa() {
        const mapContainer = document.getElementById('mapaVisualizacoes');
        if (!mapContainer || !dadosMapaVisualizacoes.length) return;

        // Criar o mapa centrado no Brasil como padrão
        mapaInterativo = L.map('mapaVisualizacoes').setView([-15.7975, -47.8919], 4);

        // Adicionar camada do mapa
        L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
            attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
        }).addTo(mapaInterativo);

        // Preparar dados para ajuste automático do zoom
        const latitudes = [];
        const longitudes = [];

        // Adicionar marcadores para cada localização
        dadosMapaVisualizacoes.forEach(function (loc) {
            const lat = parseFloat(loc.latitude);
            const lng = parseFloat(loc.longitude);

            latitudes.push(lat);
            longitudes.push(lng);

            // Determinar tamanho do marcador baseado no número de visualizações
            let markerSize = Math.min(Math.max(loc.visualizacoes * 3, 15), 50);
            let color = '#007bff';

            // Cores baseadas na quantidade de visualizações
            if (loc.visualizacoes >= 10) color = '#dc3545'; // Vermelho para muitas
            else if (loc.visualizacoes >= 5) color = '#ffc107'; // Amarelo para médias
            else if (loc.visualizacoes >= 2) color = '#28a745'; // Verde para algumas
            else color = '#6c757d'; // Cinza para poucas

            // Criar marcador customizado
            const marker = L.circleMarker([lat, lng], {
                radius: markerSize / 2,
                fillColor: color,
                color: '#fff',
                weight: 2,
                opacity: 1,
                fillOpacity: 0.8
            }).addTo(mapaInterativo);

            // Popup com informações detalhadas
            const cidadeCompleta = loc.cidade && loc.estado ?
                `${loc.cidade}, ${loc.estado}` :
                (loc.cidade || loc.pais || 'Localização desconhecida');

            const popupContent = `
                    <div class="text-center">
                        <h6><i class="fas fa-map-marker-alt text-danger"></i> ${cidadeCompleta}</h6>
                        <div class="row text-center">
                            <div class="col-6">
                                <strong>${loc.visualizacoes}</strong><br>
                                <small class="text-muted">Visualizações</small>
                            </div>
                            <div class="col-6">
                                <strong>${Math.round(loc.tempoMedio)}s</strong><br>
                                <small class="text-muted">Tempo médio</small>
                            </div>
                        </div>
                        <small class="text-muted">Lat: ${lat.toFixed(4)}, Lng: ${lng.toFixed(4)}</small>
                    </div>
                `;

            marker.bindPopup(popupContent);

            // Adicionar efeito hover
            marker.on('mouseover', function () {
                this.openPopup();
                this.setStyle({ weight: 4, radius: markerSize / 1.5 });
            });

            marker.on('mouseout', function () {
                this.setStyle({ weight: 2, radius: markerSize / 2 });
            });
        });

        // Ajustar o zoom para mostrar todos os marcadores
        if (latitudes.length > 1) {
            const bounds = L.latLngBounds(
                latitudes.map((lat, i) => [lat, longitudes[i]])
            );
            mapaInterativo.fitBounds(bounds, { padding: [20, 20] });
        } else if (latitudes.length === 1) {
            mapaInterativo.setView([latitudes[0], longitudes[0]], 10);
        }

        // Adicionar controles de zoom customizados
        L.control.zoom({
            position: 'topright'
        }).addTo(mapaInterativo);

        // Adicionar escala
        L.control.scale({
            position: 'bottomleft'
        }).addTo(mapaInterativo);
    }

    // Gráfico de Visualizações por Dia
    function inicializarGraficoVisualizacoesDia() {
        const ctx = document.getElementById('graficoVisualizacoesDia');
        if (!ctx || !dadosVisualizacoesDia.length) return;

        const labels = dadosVisualizacoesDia.map(d => new Date(d.data).toLocaleDateString('pt-BR'));
        const visualizacoes = dadosVisualizacoesDia.map(d => d.visualizacoes);
        const tempoMedio = dadosVisualizacoesDia.map(d => Math.round(d.tempoMedio));

        new Chart(ctx, {
            type: 'line',
            data: {
                labels: labels,
                datasets: [
                    {
                        label: 'Visualizações',
                        data: visualizacoes,
                        borderColor: '#007bff',
                        backgroundColor: 'rgba(0, 123, 255, 0.1)',
                        borderWidth: 2,
                        fill: true,
                        tension: 0.4,
                        yAxisID: 'y'
                    },
                    {
                        label: 'Tempo Médio (s)',
                        data: tempoMedio,
                        borderColor: '#28a745',
                        backgroundColor: 'rgba(40, 167, 69, 0.1)',
                        borderWidth: 2,
                        fill: false,
                        tension: 0.4,
                        yAxisID: 'y1'
                    }
                ]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                scales: {
                    y: {
                        type: 'linear',
                        display: true,
                        position: 'left',
                        beginAtZero: true,
                        title: {
                            display: true,
                            text: 'Visualizações'
                        }
                    },
                    y1: {
                        type: 'linear',
                        display: true,
                        position: 'right',
                        beginAtZero: true,
                        title: {
                            display: true,
                            text: 'Tempo (segundos)'
                        },
                        grid: {
                            drawOnChartArea: false,
                        },
                    }
                }
            }
        });
    }

    // Gráfico de Tempos de Sessão
    function inicializarGraficoTemposSessao() {
        const ctx = document.getElementById('graficoTemposSessao');
        if (!ctx || !dadosTemposSessao.length) return;

        const intervalos = {
            '0-30s': 0,
            '31-60s': 0,
            '1-2min': 0,
            '2-5min': 0,
            '5+min': 0
        };

        dadosTemposSessao.forEach(sessao => {
            const tempo = sessao.tempoSegundos;
            if (tempo <= 30) intervalos['0-30s']++;
            else if (tempo <= 60) intervalos['31-60s']++;
            else if (tempo <= 120) intervalos['1-2min']++;
            else if (tempo <= 300) intervalos['2-5min']++;
            else intervalos['5+min']++;
        });

        new Chart(ctx, {
            type: 'doughnut',
            data: {
                labels: Object.keys(intervalos),
                datasets: [{
                    data: Object.values(intervalos),
                    backgroundColor: [
                        '#dc3545', '#ffc107', '#007bff', '#28a745', '#6f42c1'
                    ],
                    borderWidth: 0
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        position: 'bottom'
                    }
                }
            }
        });
    }

    // Gráfico de Interações
    function inicializarGraficoInteracoes() {
        const ctx = document.getElementById('graficoInteracoes');
        if (!ctx) return;

        new Chart(ctx, {
            type: 'bar',
            data: {
                labels: ['WhatsApp', 'Email'],
                datasets: [{
                    data: [estatisticasGerais.cliquesWhatsApp, estatisticasGerais.cliquesEmail],
                    backgroundColor: ['#25d366', '#007bff'],
                    borderWidth: 0
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    legend: {
                        display: false
                    }
                },
                scales: {
                    y: {
                        beginAtZero: true,
                        ticks: {
                            stepSize: 1
                        }
                    }
                }
            }
        });
    }

    // Gráfico de Dispositivos
    function inicializarGraficoDispositivos() {
        const ctx = document.getElementById('graficoDispositivos');
        if (!ctx || !dadosDispositivos.length) return;

        const dispositivosCount = {};
        dadosDispositivos.forEach(d => {
            dispositivosCount[d.categoria] = (dispositivosCount[d.categoria] || 0) + d.quantidade;
        });

        new Chart(ctx, {
            type: 'pie',
            data: {
                labels: Object.keys(dispositivosCount),
                datasets: [{
                    data: Object.values(dispositivosCount),
                    backgroundColor: ['#007bff', '#28a745', '#ffc107']
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    title: {
                        display: true,
                        text: 'Dispositivos'
                    },
                    legend: {
                        position: 'bottom'
                    }
                }
            }
        });
    }

    // Gráfico de Navegadores
    function inicializarGraficoNavegadores() {
        const ctx = document.getElementById('graficoNavegadores');
        if (!ctx || !dadosDispositivos.length) return;

        const navegadoresCount = {};
        dadosDispositivos.forEach(d => {
            const navegador = d.subcategoria && d.subcategoria.split(' ')[0] || 'Desconhecido';
            navegadoresCount[navegador] = (navegadoresCount[navegador] || 0) + d.quantidade;
        });

        new Chart(ctx, {
            type: 'pie',
            data: {
                labels: Object.keys(navegadoresCount),
                datasets: [{
                    data: Object.values(navegadoresCount),
                    backgroundColor: ['#17a2b8', '#6f42c1', '#e83e8c', '#fd7e14']
                }]
            },
            options: {
                responsive: true,
                maintainAspectRatio: false,
                plugins: {
                    title: {
                        display: true,
                        text: 'Navegadores'
                    },
                    legend: {
                        position: 'bottom'
                    }
                }
            }
        });
    }

    // Funções auxiliares
    function atualizarDados() {
        location.reload();
    }

    function toggleMaisSessoes() {
        // Implementar carregamento de mais sessões via AJAX
        alert('Funcionalidade em desenvolvimento...');
    }

    function copiarLinkProposta() {
        const linkInput = document.getElementById('linkProposta');
        linkInput.select();
        document.execCommand('copy');

        // Feedback visual
        const btn = event.target;
        const originalText = btn.innerHTML;
        btn.innerHTML = '<i class="fas fa-check"></i>';
        btn.classList.remove('btn-outline-primary');
        btn.classList.add('btn-success');

        setTimeout(() => {
            btn.innerHTML = originalText;
            btn.classList.remove('btn-success');
            btn.classList.add('btn-outline-primary');
        }, 2000);
    }

    function compartilharWhatsApp() {
        const link = document.getElementById('linkProposta') ?
            document.getElementById('linkProposta').value :
            window.location.origin + '/Proposta/Publico/@Model.Proposta.Id';

        const texto = `Confira esta proposta de viagem: @Model.Proposta.Titulo`;
        const whatsappUrl = `https://wa.me/?text=${encodeURIComponent(texto + ' ' + link)}`;
        window.open(whatsappUrl, '_blank');
    }

    function updateStatsCards(data) {
        // Implementar atualização dos cards sem refresh
        console.log('Dados atualizados:', data);
    }

    // Inicializar tudo quando a página carregar
    document.addEventListener('DOMContentLoaded', function () {
        // Inicializar mapa sempre (mesmo sem dados, para mostrar o mapa vazio)
        if (document.getElementById('mapaVisualizacoes')) {
            setTimeout(inicializarMapa, 100); // Pequeno delay para garantir que o container está pronto
        }

        // Só inicializar gráficos se houver dados
        if (@Model.EstatisticasGerais.TotalVisualizacoes > 0) {
            // Aguardar um pouco para que os elementos colapsáveis sejam inicializados
            setTimeout(() => {
                inicializarGraficoVisualizacoesDia();
                inicializarGraficoTemposSessao();
                inicializarGraficoInteracoes();

@if (Model.DispositivosENavegadores.Any())
{
    <text>
                inicializarGraficoDispositivos();
                inicializarGraficoNavegadores();
    </text>
}
            }, 500);
        }

        // Auto-refresh a cada 2 minutos se houver dados
        if (@Model.EstatisticasGerais.TotalVisualizacoes > 0) {
            setInterval(function () {
                fetch('/PropostaAnalyticsData/GetPropostaEstatisticas/@Model.Proposta.Id')
                    .then(response => response.json())
                    .then(data => {
                        updateStatsCards(data);
                    })
                    .catch(console.error);
            }, 120000); // 2 minutos
        }

        // Inicializar gráficos quando a seção for expandida
        const advancedChartsElement = document.getElementById('advancedCharts');
        if (advancedChartsElement) {
            advancedChartsElement.addEventListener('shown.bs.collapse', function () {
                // Re-inicializar gráficos após a expansão
                setTimeout(() => {
                    inicializarGraficoVisualizacoesDia();
                    inicializarGraficoTemposSessao();
                    inicializarGraficoInteracoes();
                }, 100);
            });
        }
    });

    // Redimensionar mapa quando a janela mudar de tamanho
    window.addEventListener('resize', function () {
        if (mapaInterativo) {
            setTimeout(() => {
                mapaInterativo.invalidateSize();
            }, 100);
        }
    });
</script>

<style>
/* === DESIGN SYSTEM EXECUTIVO === */
:root {
    --exec-primary: #0A1128;
    --exec-primary-light: #1a2845;
    --exec-secondary: #65a3d4;
    --exec-accent: #2ec4b6;
    --exec-success: #28a745;
    --exec-warning: #ffc107;
    --exec-danger: #dc3545;
    --exec-info: #17a2b8;
    
    --exec-bg-primary: #ffffff;
    --exec-bg-secondary: #f8f9fa;
    --exec-bg-tertiary: #e9ecef;
    --exec-border: #dee2e6;
    --exec-text: #212529;
    --exec-text-muted: #6c757d;
    --exec-text-light: #adb5bd;
    
    --exec-shadow-sm: 0 1px 3px rgba(0,0,0,0.12), 0 1px 2px rgba(0,0,0,0.24);
    --exec-shadow-md: 0 3px 6px rgba(0,0,0,0.16), 0 3px 6px rgba(0,0,0,0.23);
    --exec-shadow-lg: 0 10px 20px rgba(0,0,0,0.19), 0 6px 6px rgba(0,0,0,0.23);
    
    --exec-radius: 8px;
    --exec-radius-lg: 12px;
    --exec-transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
}

/* === HEADER EXECUTIVO === */
.executive-analytics-header {
    background: linear-gradient(135deg, var(--exec-primary) 0%, var(--exec-primary-light) 100%);
    color: white;
    padding: 2rem 0;
    margin: -2rem -15px 2rem -15px;
    position: relative;
    overflow: hidden;
}

.executive-analytics-header::before {
    content: '';
    position: absolute;
    top: 0;
    right: 0;
    width: 300px;
    height: 100%;
    background: linear-gradient(45deg, rgba(255,255,255,0.05) 0%, rgba(255,255,255,0.02) 100%);
    transform: skewX(-15deg);
}

.header-content {
    display: flex;
    justify-content: space-between;
    align-items: center;
    max-width: 1400px;
    margin: 0 auto;
    padding: 0 2rem;
    position: relative;
    z-index: 2;
}

.header-title h1 {
    font-size: 1.5rem;
    font-weight: 700;
    margin: 0 0 0.5rem 0;
    opacity: 0.9;
}

.proposal-title {
    font-size: 2rem;
    font-weight: 800;
    margin: 0 0 1rem 0;
    line-height: 1.2;
}

.proposal-meta {
    display: flex;
    gap: 2rem;
    flex-wrap: wrap;
}

.meta-item {
    display: flex;
    align-items: center;
    opacity: 0.9;
    font-weight: 500;
}

.header-actions {
    display: flex;
    gap: 1rem;
    flex-shrink: 0;
}

/* === ALERT EXECUTIVO === */
.executive-alert {
    border: none;
    border-radius: var(--exec-radius-lg);
    border-left: 4px solid var(--exec-info);
    background: rgba(23, 162, 184, 0.1);
    margin-bottom: 2rem;
}

.alert-content {
    display: flex;
    align-items: flex-start;
    gap: 1rem;
}

.alert-icon {
    font-size: 1.5rem;
    color: var(--exec-info);
    margin-top: 0.125rem;
}

/* === INFORMAÇÕES DA PROPOSTA === */
.proposal-info-card .card-content {
    padding: 1.5rem;
}

.proposal-info-grid {
    display: grid;
    grid-template-columns: 200px 1fr;
    gap: 2rem;
    align-items: start;
}

.proposal-image {
    width: 100%;
}

.proposal-cover-image {
    width: 100%;
    height: 140px;
    object-fit: cover;
    border-radius: var(--exec-radius);
    border: 2px solid var(--exec-border);
}

.proposal-placeholder {
    width: 100%;
    height: 140px;
    background: var(--exec-bg-secondary);
    border: 2px dashed var(--exec-border);
    border-radius: var(--exec-radius);
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    color: var(--exec-text-muted);
}

.proposal-placeholder i {
    margin-bottom: 0.5rem;
}

.proposal-placeholder p {
    margin: 0;
    font-size: 0.875rem;
}

.detail-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1rem;
}

.detail-item {
    display: flex;
    flex-direction: column;
    gap: 0.25rem;
}

.detail-label {
    font-size: 0.75rem;
    font-weight: 600;
    color: var(--exec-text-muted);
    text-transform: uppercase;
    letter-spacing: 0.5px;
}

.detail-value {
    font-size: 0.875rem;
    font-weight: 500;
    color: var(--exec-text);
}

/* === KPIs EXECUTIVOS === */
.executive-kpis {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(220px, 1fr));
    gap: 1.5rem;
    margin-bottom: 2rem;
}

.kpi-card {
    background: var(--exec-bg-primary);
    border-radius: var(--exec-radius-lg);
    padding: 1.5rem;
    box-shadow: var(--exec-shadow-sm);
    border: 1px solid var(--exec-border);
    display: flex;
    align-items: center;
    gap: 1rem;
    transition: var(--exec-transition);
    position: relative;
    overflow: hidden;
}

.kpi-card::before {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 4px;
    height: 100%;
    background: var(--exec-primary);
}

.kpi-card:hover {
    transform: translateY(-2px);
    box-shadow: var(--exec-shadow-md);
}

.kpi-card.kpi-primary::before { background: var(--exec-primary); }
.kpi-card.kpi-success::before { background: var(--exec-success); }
.kpi-card.kpi-warning::before { background: var(--exec-warning); }
.kpi-card.kpi-info::before { background: var(--exec-info); }
.kpi-card.kpi-danger::before { background: var(--exec-danger); }

.kpi-icon {
    width: 50px;
    height: 50px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.25rem;
    color: white;
    background: var(--exec-primary);
    flex-shrink: 0;
}

.kpi-primary .kpi-icon { background: var(--exec-primary); }
.kpi-success .kpi-icon { background: var(--exec-success); }
.kpi-warning .kpi-icon { background: var(--exec-warning); }
.kpi-info .kpi-icon { background: var(--exec-info); }
.kpi-danger .kpi-icon { background: var(--exec-danger); }

.kpi-content {
    flex: 1;
    min-width: 0;
}

.kpi-number {
    font-size: 2rem;
    font-weight: 800;
    color: var(--exec-text);
    line-height: 1;
    margin-bottom: 0.25rem;
}

.kpi-label {
    font-size: 0.875rem;
    font-weight: 600;
    color: var(--exec-text);
    text-transform: uppercase;
    letter-spacing: 0.5px;
    margin-bottom: 0.125rem;
}

.kpi-subtitle {
    font-size: 0.75rem;
    color: var(--exec-text-muted);
    font-weight: 500;
}

/* === DASHBOARD EXECUTIVO === */
.executive-dashboard {
    display: flex;
    flex-direction: column;
    gap: 2rem;
}

.dashboard-section {
    display: grid;
    grid-template-columns: 2fr 1fr;
    gap: 2rem;
}

.dashboard-primary {
    display: flex;
    flex-direction: column;
}

.dashboard-secondary {
    display: flex;
    flex-direction: column;
    gap: 1.5rem;
}

/* === CARDS EXECUTIVOS === */
.executive-card {
    background: var(--exec-bg-primary);
    border-radius: var(--exec-radius-lg);
    box-shadow: var(--exec-shadow-sm);
    border: 1px solid var(--exec-border);
    overflow: hidden;
    transition: var(--exec-transition);
}

.executive-card:hover {
    box-shadow: var(--exec-shadow-md);
}

.card-header {
    padding: 1.5rem;
    background: var(--exec-bg-secondary);
    border-bottom: 1px solid var(--exec-border);
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.card-header h3 {
    font-size: 1.125rem;
    font-weight: 700;
    color: var(--exec-text);
    margin: 0;
    display: flex;
    align-items: center;
}

.card-badge {
    background: var(--exec-primary);
    color: white;
    padding: 0.375rem 0.75rem;
    border-radius: 20px;
    font-size: 0.75rem;
    font-weight: 600;
}

.card-toggle {
    background: none;
    border: none;
    width: 100%;
    text-align: left;
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0;
}

.toggle-icon {
    transition: var(--exec-transition);
}

.card-toggle[aria-expanded="true"] .toggle-icon {
    transform: rotate(180deg);
}

.card-content {
    padding: 1.5rem;
}

/* === MAPA INTERATIVO === */
.interactive-map {
    height: 400px;
    border-radius: var(--exec-radius);
    border: 2px solid var(--exec-border);
    margin-bottom: 1rem;
}

.map-summary {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
    gap: 0.75rem;
}

.location-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.75rem;
    background: var(--exec-bg-secondary);
    border-radius: var(--exec-radius);
    border: 1px solid var(--exec-border);
}

.location-info {
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

.location-icon {
    color: var(--exec-danger);
}

.location-name {
    font-weight: 500;
    color: var(--exec-text);
}

.location-stats {
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

.stat-badge {
    padding: 0.25rem 0.5rem;
    border-radius: 12px;
    font-size: 0.75rem;
    font-weight: 600;
    color: white;
}

.stat-badge.primary {
    background: var(--exec-primary);
}

.stat-time {
    color: var(--exec-text-muted);
    font-size: 0.75rem;
}

/* === DISPOSITIVOS === */
.chart-container {
    height: 200px;
    margin-bottom: 1rem;
}

.chart-container.small {
    height: 120px;
}

.devices-list {
    display: flex;
    flex-direction: column;
    gap: 0.5rem;
}

.device-item {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 0.5rem 0;
    border-bottom: 1px solid var(--exec-border);
}

.device-item:last-child {
    border-bottom: none;
}

.device-name {
    font-weight: 500;
    color: var(--exec-text);
    font-size: 0.875rem;
}

.device-stats {
    display: flex;
    align-items: center;
    gap: 0.75rem;
}

.device-count {
    font-weight: 600;
    color: var(--exec-primary);
}

.device-percent {
    font-size: 0.875rem;
    color: var(--exec-text-muted);
}

/* === INTERAÇÕES === */
.interaction-stats {
    display: flex;
    gap: 1rem;
    margin-bottom: 1rem;
}

.interaction-item {
    flex: 1;
    display: flex;
    align-items: center;
    gap: 0.75rem;
    padding: 1rem;
    border-radius: var(--exec-radius);
    border: 1px solid var(--exec-border);
}

.interaction-item.whatsapp {
    background: rgba(40, 167, 69, 0.05);
    border-color: rgba(40, 167, 69, 0.2);
}

.interaction-item.email {
    background: rgba(0, 123, 255, 0.05);
    border-color: rgba(0, 123, 255, 0.2);
}

.interaction-icon {
    width: 40px;
    height: 40px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    font-size: 1.125rem;
    color: white;
}

.interaction-item.whatsapp .interaction-icon {
    background: var(--exec-success);
}

.interaction-item.email .interaction-icon {
    background: var(--exec-info);
}

.interaction-count {
    font-size: 1.5rem;
    font-weight: 700;
    color: var(--exec-text);
    display: block;
    line-height: 1;
}

.interaction-label {
    font-size: 0.875rem;
    color: var(--exec-text-muted);
    font-weight: 500;
}

/* === TABELA DE SESSÕES === */
.sessions-table {
    font-size: 0.875rem;
}

.table-header {
    display: grid;
    grid-template-columns: 1fr 1.2fr 1fr 0.8fr 1fr 0.6fr 0.8fr 1fr 1.2fr;
    gap: 1rem;
    padding: 0.75rem 1rem;
    background: var(--exec-bg-secondary);
    border-radius: var(--exec-radius) var(--exec-radius) 0 0;
    font-weight: 600;
    color: var(--exec-text);
    border-bottom: 2px solid var(--exec-border);
}

.table-body {
    max-height: 400px;
    overflow-y: auto;
}

.table-row {
    display: grid;
    grid-template-columns: 1fr 1.2fr 1fr 0.8fr 1fr 0.6fr 0.8fr 1fr 1.2fr;
    gap: 1rem;
    padding: 0.75rem 1rem;
    border-bottom: 1px solid var(--exec-border);
    transition: var(--exec-transition);
}

.table-row:hover {
    background: var(--exec-bg-secondary);
}

.session-id {
    font-family: monospace;
    font-weight: 600;
    color: var(--exec-primary);
    display: block;
    font-size: 0.875rem;
}

.datetime-value {
    font-weight: 600;
    color: var(--exec-text);
    display: block;
    font-size: 0.875rem;
}

.datetime-end {
    color: var(--exec-text-muted);
    font-size: 0.75rem;
    display: block;
    margin-top: 0.125rem;
}

.duration-badge {
    padding: 0.25rem 0.5rem;
    border-radius: 12px;
    font-size: 0.75rem;
    font-weight: 600;
    color: white;
}

.duration-badge.completed {
    background: var(--exec-info);
}

.duration-badge.ongoing {
    background: var(--exec-warning);
}

.time-value {
    font-weight: 600;
    color: var(--exec-success);
}

.progress-mini {
    width: 60px;
    height: 8px;
    background: var(--exec-bg-tertiary);
    border-radius: 4px;
    overflow: hidden;
    margin-bottom: 0.25rem;
}

.progress-bar {
    height: 100%;
    background: var(--exec-warning);
    transition: width 0.3s ease;
}

.progress-text {
    font-size: 0.75rem;
    color: var(--exec-text-muted);
}

.clicks-count {
    font-weight: 600;
    color: var(--exec-info);
}

.device-icon {
    margin-right: 0.25rem;
}

.device-icon.mobile { color: var(--exec-success); }
.device-icon.tablet { color: var(--exec-warning); }
.device-icon.desktop { color: var(--exec-info); }

.device-name,
.location-text {
    font-size: 0.8rem;
}

.no-interactions,
.no-data {
    color: var(--exec-text-light);
    font-style: italic;
}

.view-more {
    text-align: center;
    padding-top: 1rem;
    border-top: 1px solid var(--exec-border);
    margin-top: 1rem;
}

/* === GRÁFICOS AVANÇADOS === */
.charts-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
    gap: 2rem;
}

.chart-section {
    text-align: center;
}

.chart-section h4 {
    font-size: 1rem;
    font-weight: 600;
    color: var(--exec-text);
    margin-bottom: 1rem;
    text-align: center;
}

.chart-canvas {
    max-height: 250px;
}

.traffic-sources {
    display: flex;
    flex-direction: column;
    gap: 0.75rem;
}

.traffic-item {
    display: flex;
    align-items: center;
    gap: 0.75rem;
    padding: 0.75rem;
    background: var(--exec-bg-secondary);
    border-radius: var(--exec-radius);
    border: 1px solid var(--exec-border);
}

.traffic-icon {
    width: 32px;
    height: 32px;
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    background: var(--exec-primary);
    color: white;
    font-size: 0.875rem;
}

.traffic-info {
    flex: 1;
}

.traffic-name {
    font-weight: 600;
    color: var(--exec-text);
    display: block;
}

.traffic-stats {
    display: flex;
    gap: 1rem;
    margin-top: 0.25rem;
}

.traffic-views,
.traffic-time,
.traffic-rate {
    font-size: 0.75rem;
    color: var(--exec-text-muted);
}

/* === ESTADO SEM DADOS === */
.no-data-card {
    margin-top: 2rem;
}

.no-data-state {
    text-align: center;
    padding: 3rem 2rem;
}

.no-data-icon {
    font-size: 4rem;
    color: var(--exec-text-light);
    margin-bottom: 1.5rem;
}

.no-data-state h3 {
    font-size: 1.5rem;
    font-weight: 600;
    color: var(--exec-text);
    margin-bottom: 1rem;
}

.no-data-state p {
    font-size: 1rem;
    color: var(--exec-text-muted);
    margin-bottom: 2rem;
    max-width: 500px;
    margin-left: auto;
    margin-right: auto;
}

.share-options {
    max-width: 600px;
    margin: 0 auto;
}

.share-link {
    display: flex;
    gap: 0.5rem;
    margin-bottom: 1.5rem;
}

.share-link .form-control {
    flex: 1;
    border-radius: var(--exec-radius);
    border: 2px solid var(--exec-border);
}

.share-actions {
    display: flex;
    gap: 1rem;
    justify-content: center;
}

/* === ESTADOS VAZIOS === */
.empty-state {
    text-align: center;
    padding: 2rem;
    color: var(--exec-text-muted);
}

.empty-state.small {
    padding: 1rem;
}

.empty-state i {
    margin-bottom: 0.5rem;
}

.empty-state h4 {
    font-size: 1.125rem;
    font-weight: 600;
    margin-bottom: 0.5rem;
    color: var(--exec-text);
}

.empty-state p {
    margin: 0;
    font-size: 0.875rem;
}

/* === RESPONSIVO === */
@@media (max-width: 1200px) {
    .dashboard-section {
        grid-template-columns: 1fr;
        gap: 1.5rem;
    }

    .dashboard-secondary {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
        gap: 1.5rem;
    }
}

@@media (max-width: 768px) {
    .executive-analytics-header {
        padding: 1.5rem 0;
        margin: -1rem -15px 1.5rem -15px;
    }

    .header-content {
        flex-direction: column;
        gap: 1.5rem;
        padding: 0 1rem;
        text-align: center;
    }

    .proposal-title {
        font-size: 1.5rem;
    }

    .proposal-meta {
        justify-content: center;
        gap: 1rem;
    }

    .header-actions {
        flex-wrap: wrap;
        justify-content: center;
    }

    .proposal-info-grid {
        grid-template-columns: 1fr;
        gap: 1rem;
        text-align: center;
    }

    .proposal-image {
        max-width: 200px;
        margin: 0 auto;
    }

    .executive-kpis {
        grid-template-columns: repeat(auto-fit, minmax(180px, 1fr));
        gap: 1rem;
    }

    .kpi-card {
        padding: 1rem;
        flex-direction: column;
        text-align: center;
    }

    .kpi-number {
        font-size: 1.5rem;
    }

    .map-summary {
        grid-template-columns: 1fr;
    }

    .interaction-stats {
        flex-direction: column;
        gap: 0.75rem;
    }

    .table-header {
        display: none;
    }

    .table-row {
        display: block;
        padding: 1rem;
        margin-bottom: 0.75rem;
        background: var(--exec-bg-secondary);
        border-radius: var(--exec-radius);
        border: 1px solid var(--exec-border);
    }

    .table-row > div {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 0.25rem 0;
        border-bottom: 1px solid var(--exec-border);
    }

    .table-row > div:last-child {
        border-bottom: none;
    }

    .table-row > div::before {
        content: attr(class);
        font-weight: 600;
        color: var(--exec-text-muted);
        text-transform: capitalize;
        font-size: 0.75rem;
    }

    .col-session::before { content: "Sessão:"; }
    .col-datetime::before { content: "Data/Hora:"; }
    .col-duration::before { content: "Duração:"; }
    .col-time::before { content: "Tempo:"; }
    .col-scroll::before { content: "Scroll:"; }
    .col-clicks::before { content: "Cliques:"; }
    .col-interactions::before { content: "Interações:"; }
    .col-device::before { content: "Dispositivo:"; }
    .col-location::before { content: "Localização:"; }

    .charts-grid {
        grid-template-columns: 1fr;
        gap: 1.5rem;
    }

    .interactive-map {
        height: 300px;
    }

    .share-link {
        flex-direction: column;
    }

    .share-actions {
        flex-direction: column;
        align-items: stretch;
    }
}

@@media (max-width: 576px) {
    .executive-kpis {
        grid-template-columns: 1fr;
    }

    .card-content {
        padding: 1rem;
    }

    .kpi-card {
        padding: 1rem;
    }

    .chart-container {
        height: 150px;
    }

    .interaction-item {
        padding: 0.75rem;
    }

    .interaction-icon {
        width: 32px;
        height: 32px;
        font-size: 1rem;
    }

    .interaction-count {
        font-size: 1.25rem;
    }
}

/* === ANIMAÇÕES === */
@@keyframes fadeInUp {
    from {
        opacity: 0;
        transform: translateY(20px);
    }
    to {
        opacity: 1;
        transform: translateY(0);
    }
}

.executive-card {
    animation: fadeInUp 0.6s ease-out;
}

.kpi-card:nth-child(1) { animation-delay: 0.1s; }
.kpi-card:nth-child(2) { animation-delay: 0.2s; }
.kpi-card:nth-child(3) { animation-delay: 0.3s; }
.kpi-card:nth-child(4) { animation-delay: 0.4s; }
.kpi-card:nth-child(5) { animation-delay: 0.5s; }

/* === MELHORIAS NA SCROLLBAR === */
.table-body::-webkit-scrollbar {
    width: 6px;
}

.table-body::-webkit-scrollbar-track {
    background: var(--exec-bg-tertiary);
    border-radius: 3px;
}

.table-body::-webkit-scrollbar-thumb {
    background: var(--exec-text-light);
    border-radius: 3px;
}

.table-body::-webkit-scrollbar-thumb:hover {
    background: var(--exec-text-muted);
}

/* === LOADING STATES === */
.loading-skeleton {
    background: linear-gradient(90deg, var(--exec-bg-secondary) 25%, var(--exec-bg-tertiary) 50%, var(--exec-bg-secondary) 75%);
    background-size: 200% 100%;
    animation: loading 1.5s infinite;
    border-radius: var(--exec-radius);
}

@@keyframes loading {
    0% { background-position: 200% 0; }
    100% { background-position: -200% 0; }
}

/* === HOVER EFFECTS === */
.kpi-card:hover .kpi-icon {
    transform: scale(1.1);
}

.location-item:hover {
    background: var(--exec-bg-tertiary);
    border-color: var(--exec-primary);
}

.device-item:hover {
    background: var(--exec-bg-tertiary);
}

.interaction-item:hover {
    transform: translateY(-2px);
    box-shadow: var(--exec-shadow-sm);
}

.traffic-item:hover {
    background: var(--exec-bg-tertiary);
    border-color: var(--exec-primary);
}

/* === FOCUS STATES === */
.btn:focus,
.form-control:focus {
    outline: none;
    box-shadow: 0 0 0 3px rgba(10, 17, 40, 0.15);
}

/* === PRINT STYLES === */
@@media print {
    .executive-analytics-header,
    .header-actions,
    .btn {
        display: none !important;
    }

    .executive-card {
        box-shadow: none;
        border: 1px solid #ddd;
        break-inside: avoid;
        margin-bottom: 1rem;
    }

    .interactive-map {
        height: 200px;
        background: #f0f0f0;
        display: flex;
        align-items: center;
        justify-content: center;
    }

    .interactive-map::after {
        content: "Mapa interativo - visualize online";
        color: #666;
    }
}

/* === CUSTOMIZAÇÕES ESPECÍFICAS PARA LEAFLET === */
.leaflet-popup-content {
    margin: 8px 12px;
    font-size: 13px;
}

.leaflet-popup-content-wrapper {
    border-radius: 8px;
    box-shadow: 0 3px 14px rgba(0,0,0,0.4);
}

/* === MELHORIAS VISUAIS EXTRAS === */
.text-success { color: var(--exec-success) !important; }
.text-danger { color: var(--exec-danger) !important; }
.text-primary { color: var(--exec-info) !important; }
.text-muted { color: var(--exec-text-muted) !important; }

.badge.bg-info { background-color: var(--exec-info) !important; }
.badge.bg-success { background-color: var(--exec-success) !important; }
.badge.bg-warning { background-color: var(--exec-warning) !important; }
.badge.bg-primary { background-color: var(--exec-primary) !important; }
.badge.bg-secondary { background-color: var(--exec-text-muted) !important; }

/* === BOTÕES EXECUTIVOS === */
.btn {
    border-radius: var(--exec-radius);
    font-weight: 500;
    transition: var(--exec-transition);
}

.btn-primary {
    background-color: var(--exec-primary);
    border-color: var(--exec-primary);
}

.btn-primary:hover {
    background-color: var(--exec-primary-light);
    border-color: var(--exec-primary-light);
}

.btn-success {
    background-color: var(--exec-success);
    border-color: var(--exec-success);
}

.btn-outline-secondary {
    color: var(--exec-text-muted);
    border-color: var(--exec-border);
}

.btn-outline-secondary:hover {
    background-color: var(--exec-bg-secondary);
    border-color: var(--exec-text-muted);
    color: var(--exec-text);
}

.btn-outline-primary {
    color: var(--exec-primary);
    border-color: var(--exec-primary);
}

.btn-outline-primary:hover {
    background-color: var(--exec-primary);
    border-color: var(--exec-primary);
}
</style>