@{
    Layout = "_LayoutPublico";
    ViewData["Title"] = Model.Titulo;
}
@model SistemaUsuarios.Models.Proposta
@using SistemaUsuarios.Models

<!DOCTYPE html>
<html lang="pt-br">
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@Model.Titulo - Proposta de Viagem</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/aos@2.3.4/dist/aos.css" rel="stylesheet">
    <style>
        :root {
            --primary-gradient: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            --success-gradient: linear-gradient(135deg, #11998e 0%, #38ef7d 100%);
            --card-shadow: 0 8px 16px rgba(0, 0, 0, 0.1);
            --border-radius: 12px;
        }

        body {
            font-family: 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;
            line-height: 1.6;
            color: #2d3748;
        }

        .hero-section {
            background: var(--primary-gradient);
            color: white;
            padding: 80px 0;
            position: relative;
            overflow: hidden;
        }

        .hero-section::before {
            content: '';
            position: absolute;
            top: 0;
            left: 0;
            right: 0;
            bottom: 0;
            background: url('data:image/svg+xml,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 1000 100" fill="white" opacity="0.1"><polygon points="1000,100 1000,0 0,100"/></svg>') no-repeat bottom;
            background-size: cover;
        }

        .hero-content {
            position: relative;
            z-index: 2;
        }

        .card-modern {
            border: none;
            border-radius: var(--border-radius);
            box-shadow: var(--card-shadow);
            transition: all 0.3s ease;
            overflow: hidden;
        }

        .card-modern:hover {
            transform: translateY(-4px);
            box-shadow: 0 12px 24px rgba(0, 0, 0, 0.15);
        }

        .btn-contact {
            background: var(--success-gradient);
            border: none;
            padding: 12px 24px;
            border-radius: 8px;
            transition: all 0.3s ease;
            color: white;
            text-decoration: none;
            display: inline-block;
        }

        .btn-contact:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
            color: white;
        }

        .scroll-indicator {
            position: fixed;
            top: 0;
            left: 0;
            width: 0%;
            height: 4px;
            background: var(--success-gradient);
            z-index: 9999;
            transition: width 0.1s ease;
        }

        .stats-card {
            background: white;
            border-radius: var(--border-radius);
            padding: 20px;
            text-align: center;
            box-shadow: var(--card-shadow);
            border-top: 4px solid #667eea;
        }

        .destination-card {
            background: white;
            border-radius: var(--border-radius);
            overflow: hidden;
            box-shadow: var(--card-shadow);
            transition: all 0.3s ease;
            margin-bottom: 24px;
        }

        .destination-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 12px 24px rgba(0, 0, 0, 0.15);
        }

        .destination-image {
            width: 100%;
            height: 240px;
            object-fit: cover;
            transition: transform 0.3s ease;
        }

        .destination-card:hover .destination-image {
            transform: scale(1.05);
        }

        .photo-gallery {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 16px;
            margin-top: 16px;
        }

        .photo-item {
            position: relative;
            border-radius: 8px;
            overflow: hidden;
            cursor: pointer;
            transition: transform 0.3s ease;
        }

        .photo-item:hover {
            transform: scale(1.05);
        }

        .photo-item img {
            width: 100%;
            height: 150px;
            object-fit: cover;
        }

        .photo-overlay {
            position: absolute;
            bottom: 0;
            left: 0;
            right: 0;
            background: linear-gradient(transparent, rgba(0,0,0,0.7));
            color: white;
            padding: 12px;
            font-size: 0.9rem;
        }

        .timeline {
            position: relative;
            padding-left: 30px;
        }

        .timeline::before {
            content: '';
            position: absolute;
            left: 15px;
            top: 0;
            bottom: 0;
            width: 2px;
            background: #e2e8f0;
        }

        .timeline-item {
            position: relative;
            margin-bottom: 32px;
        }

        .timeline-item::before {
            content: '';
            position: absolute;
            left: -22px;
            top: 8px;
            width: 12px;
            height: 12px;
            border-radius: 50%;
            background: #667eea;
            border: 3px solid white;
            box-shadow: 0 0 0 3px #e2e8f0;
        }

        .floating-contact {
            position: fixed;
            bottom: 30px;
            right: 30px;
            z-index: 1000;
        }

        .floating-contact .btn {
            border-radius: 50px;
            padding: 12px 24px;
            box-shadow: 0 8px 16px rgba(0, 0, 0, 0.2);
            animation: pulse 2s infinite;
        }

        @@keyframes pulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.05); }
            100% { transform: scale(1); }
        }

        .feature-icon {
            width: 64px;
            height: 64px;
            border-radius: 50%;
            background: var(--primary-gradient);
            display: flex;
            align-items: center;
            justify-content: center;
            color: white;
            font-size: 24px;
            margin: 0 auto 16px;
        }

        .lightbox {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0, 0, 0, 0.9);
            z-index: 9999;
            align-items: center;
            justify-content: center;
        }

        .lightbox img {
            max-width: 90%;
            max-height: 90%;
            border-radius: 8px;
        }

        .lightbox-close {
            position: absolute;
            top: 20px;
            right: 30px;
            color: white;
            font-size: 30px;
            cursor: pointer;
        }

        .section-title {
            text-align: center;
            margin-bottom: 48px;
        }

        .section-title h2 {
            font-size: 2.5rem;
            font-weight: 700;
            margin-bottom: 16px;
            background: var(--primary-gradient);
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            background-clip: text;
        }

        .section-title p {
            font-size: 1.1rem;
            color: #64748b;
        }

        /* Responsive Design */
        @@media (max-width: 768px) {
            .hero-section {
                padding: 60px 0;
            }
            
            .section-title h2 {
                font-size: 2rem;
            }
            
            .photo-gallery {
                grid-template-columns: repeat(2, 1fr);
            }
            
            .floating-contact {
                bottom: 20px;
                right: 20px;
            }
            
            .stats-card {
                margin-bottom: 16px;
            }
        }

        .analytics-debug {
            position: fixed;
            bottom: 10px;
            left: 10px;
            background: rgba(0,0,0,0.8);
            color: white;
            padding: 10px;
            border-radius: 5px;
            font-size: 12px;
            display: none;
            max-width: 250px;
        }
    </style>
</head>
<body>
    <!-- Indicador de Scroll -->
    <div class="scroll-indicator" id="scrollIndicator"></div>

    <!-- Hero Section -->
    <section class="hero-section">
        <div class="container hero-content">
            <div class="row align-items-center">
                <div class="col-lg-8" data-aos="fade-right">
                    <h1 class="display-4 fw-bold mb-4">@Model.Titulo</h1>
                    <p class="lead mb-4">Uma experiência única criada especialmente para você por @Model.Usuario.Nome</p>

                    <div class="row g-4">
                        @if (Model.DataInicio.HasValue && Model.DataFim.HasValue)
                        {
                            var dias = (Model.DataFim.Value - Model.DataInicio.Value).Days + 1;
                            <div class="col-md-4">
                                <div class="stats-card" data-aos="fade-up" data-aos-delay="100">
                                    <div class="feature-icon">
                                        <i class="fas fa-calendar-alt"></i>
                                    </div>
                                    <h3 class="fw-bold">@dias Dias</h3>
                                    <p class="mb-0">@Model.DataInicio.Value.ToString("dd/MM") - @Model.DataFim.Value.ToString("dd/MM/yyyy")</p>
                                </div>
                            </div>
                        }

                        <div class="col-md-4">
                            <div class="stats-card" data-aos="fade-up" data-aos-delay="200">
                                <div class="feature-icon">
                                    <i class="fas fa-users"></i>
                                </div>
                                <h3 class="fw-bold">@(Model.NumeroPassageiros + Model.NumeroCriancas)</h3>
                                <p class="mb-0">
                                    @if (Model.NumeroCriancas > 0)
                                    {
                                        <text>@Model.NumeroPassageiros adultos + @Model.NumeroCriancas crianças</text>
                                    }
                                    else
                                    {
                                        <text>@Model.NumeroPassageiros @(Model.NumeroPassageiros == 1 ? "pessoa" : "pessoas")</text>
                                    }
                                </p>
                            </div>
                        </div>

                        <div class="col-md-4">
                            <div class="stats-card" data-aos="fade-up" data-aos-delay="300">
                                <div class="feature-icon">
                                    <i class="fas fa-map-marked-alt"></i>
                                </div>
                                <h3 class="fw-bold">@Model.Destinos.Count</h3>
                                <p class="mb-0">@(Model.Destinos.Count == 1 ? "Destino" : "Destinos") Incríveis</p>
                            </div>
                        </div>
                    </div>
                </div>

                @if (!string.IsNullOrEmpty(Model.FotoCapa))
                {
                    <div class="col-lg-4" data-aos="fade-left">
                        <div class="card-modern">
                            <img src="@Model.FotoCapa" alt="@Model.Titulo" class="img-fluid" style="width: 100%; height: 300px; object-fit: cover;" />
                        </div>
                    </div>
                }
            </div>
        </div>
    </section>

    <!-- Observações Gerais -->
    @if (!string.IsNullOrEmpty(Model.ObservacoesGerais))
    {
        <section class="py-5">
            <div class="container">
                <div class="row justify-content-center">
                    <div class="col-lg-8">
                        <div class="card-modern" data-aos="fade-up">
                            <div class="card-body p-4">
                                <div class="text-center mb-4">
                                    <div class="feature-icon">
                                        <i class="fas fa-info-circle"></i>
                                    </div>
                                    <h3 class="fw-bold">Sobre Esta Viagem</h3>
                                </div>
                                <div class="text-center">
                                    <p class="lead">@Html.Raw(Model.ObservacoesGerais.Replace("\n", "<br>"))</p>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </section>
    }

    <!-- Destinos -->
    @if (Model.Destinos.Any())
    {
        <section class="py-5 bg-light">
            <div class="container">
                <div class="section-title" data-aos="fade-up">
                    <h2>Destinos da Viagem</h2>
                    <p>Explore cada parada desta jornada incrível</p>
                </div>

                <div class="timeline">
                    @foreach (var destino in Model.Destinos.OrderBy(d => d.Ordem))
                    {
                        <div class="timeline-item" data-aos="fade-up" data-aos-delay="@((destino.Ordem - 1) * 100)">
                            <div class="destination-card">
                                <div class="row g-0">
                                    <div class="col-md-5">
                                        @{
                                            var fotoPrincipal = destino.Fotos.FirstOrDefault(f => f.Principal) ?? destino.Fotos.FirstOrDefault();
                                        }
                                        @if (fotoPrincipal != null)
                                        {
                                            <img src="@fotoPrincipal.CaminhoFoto" alt="@destino.Nome" class="destination-image" onclick="openLightbox('@fotoPrincipal.CaminhoFoto', '@destino.Nome')" />
                                        }
                                        else
                                        {
                                            <div class="destination-image d-flex align-items-center justify-content-center bg-light">
                                                <i class="fas fa-map-marker-alt fa-3x text-muted"></i>
                                            </div>
                                        }
                                    </div>
                                    <div class="col-md-7">
                                        <div class="card-body p-4">
                                            <div class="d-flex justify-content-between align-items-start mb-3">
                                                <div>
                                                    <h4 class="fw-bold text-primary">@destino.Nome</h4>
                                                    @if (!string.IsNullOrEmpty(destino.Cidade) || !string.IsNullOrEmpty(destino.Pais))
                                                    {
                                                        <p class="text-muted mb-0">
                                                            <i class="fas fa-map-marker-alt me-1"></i>
                                                            @if (!string.IsNullOrEmpty(destino.Cidade))
                                                            {
                                                                @destino.Cidade
                                                                @if (!string.IsNullOrEmpty(destino.Pais))
                                                                {
                                                                    <text>, @destino.Pais</text>
                                                                }
                                                            }
                                                            else if (!string.IsNullOrEmpty(destino.Pais))
                                                            {
                                                                @destino.Pais
                                                            }
                                                        </p>
                                                    }
                                                </div>
                                                <span class="badge bg-primary fs-6">Destino @destino.Ordem</span>
                                            </div>

                                            @if (destino.DataChegada.HasValue || destino.DataSaida.HasValue)
                                            {
                                                <div class="mb-3">
                                                    <h6 class="text-muted mb-2">
                                                        <i class="fas fa-calendar me-1"></i>Período
                                                    </h6>
                                                    <p class="mb-0">
                                                        @if (destino.DataChegada.HasValue && destino.DataSaida.HasValue)
                                                        {
                                                            var diasDestino = (destino.DataSaida.Value - destino.DataChegada.Value).Days + 1;
                                                            <text>@destino.DataChegada.Value.ToString("dd/MM") - @destino.DataSaida.Value.ToString("dd/MM") (@diasDestino @(diasDestino == 1 ? "dia" : "dias"))</text>
                                                        }
                                                        else if (destino.DataChegada.HasValue)
                                                        {
                                                            <text>A partir de @destino.DataChegada.Value.ToString("dd/MM/yyyy")</text>
                                                        }
                                                        else if (destino.DataSaida.HasValue)
                                                        {
                                                            <text>Até @destino.DataSaida.Value.ToString("dd/MM/yyyy")</text>
                                                        }
                                                    </p>
                                                </div>
                                            }

                                            @if (!string.IsNullOrEmpty(destino.Descricao))
                                            {
                                                <div class="mb-3">
                                                    <h6 class="text-muted mb-2">
                                                        <i class="fas fa-info-circle me-1"></i>Sobre o Destino
                                                    </h6>
                                                    <p class="mb-0">@destino.Descricao</p>
                                                </div>
                                            }

                                            @if (destino.Fotos.Count > 1)
                                            {
                                                <div class="mb-3">
                                                    <h6 class="text-muted mb-2">
                                                        <i class="fas fa-images me-1"></i>Galeria (@destino.Fotos.Count fotos)
                                                    </h6>
                                                    <div class="photo-gallery">
                                                        @foreach (var foto in destino.Fotos.OrderBy(f => f.Ordem).Take(6))
                                                        {
                                                            <div class="photo-item" onclick="openLightbox('@foto.CaminhoFoto', '@(foto.Descricao ?? destino.Nome)')">
                                                                <img src="@foto.CaminhoFoto" alt="@foto.Descricao" />
                                                                @if (!string.IsNullOrEmpty(foto.Descricao))
                                                                {
                                                                    <div class="photo-overlay">
                                                                        @foto.Descricao
                                                                    </div>
                                                                }
                                                            </div>
                                                        }
                                                        
                                                        @if (destino.Fotos.Count > 6)
                                                        {
                                                            <div class="photo-item d-flex align-items-center justify-content-center bg-light" style="cursor: pointer;" onclick="showAllPhotos('@destino.Id')">
                                                                <div class="text-center">
                                                                    <i class="fas fa-plus fa-2x text-muted mb-2"></i>
                                                                    <p class="mb-0 text-muted">+@(destino.Fotos.Count - 6) fotos</p>
                                                                </div>
                                                            </div>
                                                        }
                                                    </div>
                                                </div>
                                            }
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>
        </section>
    }

    <!-- Seção de Contato -->
    <section class="py-5">
        <div class="container">
            <div class="row justify-content-center">
                <div class="col-lg-8">
                    <div class="card-modern text-center" data-aos="fade-up">
                        <div class="card-body p-5">
                            <div class="feature-icon">
                                <i class="fas fa-heart"></i>
                            </div>
                            <h3 class="fw-bold mb-4">Gostou da Proposta?</h3>
                            <p class="lead mb-4">Entre em contato comigo para personalizar ainda mais esta experiência e tornar sua viagem inesquecível!</p>
                            
                            <div class="row g-3 justify-content-center">
                                <div class="col-md-6">
                                    <a href="https://wa.me/55@(Model.Usuario.Telefone?.Replace("(", "").Replace(")", "").Replace("-", "").Replace(" ", ""))?text=Olá! Tenho interesse na proposta: @Model.Titulo"
                                       class="btn btn-contact w-100"
                                       data-track="whatsapp"
                                       target="_blank">
                                        <i class="fab fa-whatsapp me-2"></i>Conversar no WhatsApp
                                    </a>
                                </div>
                                <div class="col-md-6">
                                    <a href="mailto:@Model.Usuario.Email?subject=Interesse na proposta: @Model.Titulo"
                                       class="btn btn-contact w-100"
                                       data-track="email"
                                       style="background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);">
                                        <i class="fas fa-envelope me-2"></i>Enviar E-mail
                                    </a>
                                </div>
                            </div>

                            <div class="mt-4 pt-4 border-top">
                                <div class="row text-center">
                                    <div class="col-md-4">
                                        <i class="fas fa-user-tie fa-2x text-primary mb-2"></i>
                                        <h6 class="fw-bold">@Model.Usuario.Nome</h6>
                                        <small class="text-muted">Consultor de Viagens</small>
                                    </div>
                                    <div class="col-md-4">
                                        <i class="fas fa-envelope fa-2x text-primary mb-2"></i>
                                        <h6 class="fw-bold">E-mail</h6>
                                        <small class="text-muted">@Model.Usuario.Email</small>
                                    </div>
                                    <div class="col-md-4">
                                        <i class="fas fa-phone fa-2x text-primary mb-2"></i>
                                        <h6 class="fw-bold">Telefone</h6>
                                        <small class="text-muted">@Model.Usuario.Telefone</small>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </section>

    <!-- Floating Contact Button -->
    <div class="floating-contact d-md-none">
        <a href="https://wa.me/55@(Model.Usuario.Telefone?.Replace("(", "").Replace(")", "").Replace("-", "").Replace(" ", ""))?text=Olá! Tenho interesse na proposta: @Model.Titulo"
           class="btn btn-contact"
           data-track="whatsapp"
           target="_blank">
            <i class="fab fa-whatsapp me-2"></i>Falar Agora
        </a>
    </div>

    <!-- Lightbox -->
    <div class="lightbox" id="lightbox" onclick="closeLightbox()">
        <span class="lightbox-close">&times;</span>
        <img id="lightboxImage" src="" alt="" />
    </div>

    <!-- Footer -->
    <footer class="bg-dark text-white py-4">
        <div class="container text-center">
            <div class="row">
                <div class="col-md-6">
                    <h6>Sistema de Propostas de Viagem</h6>
                    <p class="mb-0 text-muted">Criando experiências inesquecíveis</p>
                </div>
                <div class="col-md-6">
                    <div class="mt-3 mt-md-0">
                        <button class="btn btn-outline-light btn-sm me-2" onclick="compartilharWhatsApp()">
                            <i class="fab fa-whatsapp me-1"></i>Compartilhar
                        </button>
                        <button class="btn btn-outline-light btn-sm" onclick="copiarLink()">
                            <i class="fas fa-copy me-1"></i>Copiar Link
                        </button>
                    </div>
                </div>
            </div>
            <hr class="my-3">
            <small class="text-muted">
                Proposta criada em @Model.DataCriacao.ToString("dd/MM/yyyy") • 
                <span id="viewCount">Carregando visualizações...</span> • 
                Link público válido
                @if (Model.DataExpiracaoLink.HasValue)
                {
                    <text> até @Model.DataExpiracaoLink.Value.ToString("dd/MM/yyyy")</text>
                }
            </small>
        </div>
    </footer>

    <!-- Debug Analytics -->
    <div class="analytics-debug" id="analyticsDebug">
        <div><strong>Analytics Debug</strong></div>
        <div>Sessão: <span id="debugSession">-</span></div>
        <div>Tempo: <span id="debugTime">0s</span></div>
        <div>Scroll: <span id="debugScroll">0%</span></div>
        <div>Cliques: <span id="debugClicks">0</span></div>
        <div>WhatsApp: <span id="debugWhatsApp">❌</span></div>
        <div>Email: <span id="debugEmail">❌</span></div>
    </div>

    <!-- Scripts -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/aos@2.3.4/dist/aos.js"></script>

    <!-- Sistema de Analytics Avançado -->
    <script>
        // Inicializar AOS (Animate on Scroll)
        AOS.init({
            duration: 800,
            easing: 'ease-in-out',
            once: true,
            offset: 100
        });

        // Sistema de Analytics Completo
        class PropostaAnalytics {
            constructor(propostaId) {
                this.propostaId = propostaId;
                this.sessionToken = this.generateSessionToken();
                this.startTime = new Date();
                this.maxScroll = 0;
                this.clicks = 0;
                this.interactions = {
                    whatsapp: false,
                    email: false
                };

                this.init();
            }

            init() {
                this.trackPageLoad();
                this.setupScrollTracking();
                this.setupClickTracking();
                this.setupBeforeUnload();
                this.sendHeartbeat();
                this.updateDebugInfo();
            }

            generateSessionToken() {
                return 'sess_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
            }

            async trackPageLoad() {
                const data = await this.collectDeviceData();

                try {
                    await fetch('/api/proposta/analytics/start', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            propostaId: this.propostaId,
                            sessionToken: this.sessionToken,
                            ...data
                        })
                    });
                } catch (error) {
                    console.warn('Analytics tracking failed:', error);
                }
            }

            async collectDeviceData() {
                const data = {
                    dataHoraInicio: new Date().toISOString(),
                    tipoDispositivo: this.getDeviceType(),
                    navegador: this.getBrowserInfo(),
                    sistemaOperacional: this.getOSInfo(),
                    resolucaoTela: `${screen.width}x${screen.height}`,
                    idiomaNavegador: navigator.language || navigator.userLanguage,
                    urlReferenciador: document.referrer,
                    tipoReferenciador: this.getReferrerType(document.referrer),
                    userAgent: navigator.userAgent,
                    deviceFingerprint: await this.generateDeviceFingerprint()
                };

                try {
                    const location = await this.getLocation();
                    if (location) {
                        data.latitude = location.latitude;
                        data.longitude = location.longitude;
                    }
                } catch (error) {
                    // Localização não disponível
                }

                return data;
            }

            getDeviceType() {
                const width = window.innerWidth;
                if (width <= 768) return 'Mobile';
                if (width <= 1024) return 'Tablet';
                return 'Desktop';
            }

            getBrowserInfo() {
                const ua = navigator.userAgent;
                let browser = 'Unknown';
                let version = '';

                if (ua.includes('Chrome/')) {
                    browser = 'Chrome';
                    version = ua.match(/Chrome\/([0-9.]+)/)?.[1] || '';
                } else if (ua.includes('Firefox/')) {
                    browser = 'Firefox';
                    version = ua.match(/Firefox\/([0-9.]+)/)?.[1] || '';
                } else if (ua.includes('Safari/') && !ua.includes('Chrome')) {
                    browser = 'Safari';
                    version = ua.match(/Version\/([0-9.]+)/)?.[1] || '';
                } else if (ua.includes('Edge/')) {
                    browser = 'Edge';
                    version = ua.match(/Edge\/([0-9.]+)/)?.[1] || '';
                }

                return `${browser} ${version}`.trim();
            }

            getOSInfo() {
                const ua = navigator.userAgent;
                if (ua.includes('Windows NT')) return 'Windows';
                if (ua.includes('Mac OS X')) return 'macOS';
                if (ua.includes('Linux')) return 'Linux';
                if (ua.includes('Android')) return 'Android';
                if (ua.includes('iPhone') || ua.includes('iPad')) return 'iOS';
                return 'Unknown';
            }

            getReferrerType(referrer) {
                if (!referrer) return 'Direto';
                if (referrer.includes('wa.me') || referrer.includes('whatsapp')) return 'WhatsApp';
                if (referrer.includes('google')) return 'Google';
                if (referrer.includes('facebook')) return 'Facebook';
                if (referrer.includes('instagram')) return 'Instagram';
                return 'Website';
            }

            async generateDeviceFingerprint() {
                const canvas = document.createElement('canvas');
                const ctx = canvas.getContext('2d');
                ctx.textBaseline = 'top';
                ctx.font = '14px Arial';
                ctx.fillText('Fingerprint', 2, 2);

                const fingerprint = [
                    navigator.userAgent,
                    navigator.language,
                    screen.width + 'x' + screen.height,
                    new Date().getTimezoneOffset(),
                    navigator.platform,
                    canvas.toDataURL(),
                    navigator.hardwareConcurrency || 0
                ].join('|');

                let hash = 0;
                for (let i = 0; i < fingerprint.length; i++) {
                    const char = fingerprint.charCodeAt(i);
                    hash = ((hash << 5) - hash) + char;
                    hash = hash & hash;
                }

                return 'fp_' + Math.abs(hash).toString(36);
            }

            getLocation() {
                return new Promise((resolve, reject) => {
                    if (!navigator.geolocation) {
                        reject(new Error('Geolocation not supported'));
                        return;
                    }

                    navigator.geolocation.getCurrentPosition(
                        position => resolve({
                            latitude: position.coords.latitude,
                            longitude: position.coords.longitude
                        }),
                        error => reject(error),
                        { timeout: 5000, enableHighAccuracy: false }
                    );
                });
            }

            setupScrollTracking() {
                let ticking = false;

                const updateScroll = () => {
                    const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
                    const docHeight = document.documentElement.scrollHeight - window.innerHeight;
                    const scrollPercent = Math.round((scrollTop / docHeight) * 100);

                    if (scrollPercent > this.maxScroll) {
                        this.maxScroll = Math.min(scrollPercent, 100);
                    }

                    document.getElementById('scrollIndicator').style.width = Math.min(scrollPercent, 100) + '%';
                    ticking = false;
                };

                window.addEventListener('scroll', () => {
                    if (!ticking) {
                        requestAnimationFrame(updateScroll);
                        ticking = true;
                    }
                });
            }

            setupClickTracking() {
                // Track WhatsApp clicks
                document.querySelectorAll('a[data-track="whatsapp"]').forEach(link => {
                    link.addEventListener('click', () => {
                        this.interactions.whatsapp = true;
                        this.clicks++;
                        this.sendInteraction('whatsapp_click');
                    });
                });

                // Track Email clicks
                document.querySelectorAll('a[data-track="email"]').forEach(link => {
                    link.addEventListener('click', () => {
                        this.interactions.email = true;
                        this.clicks++;
                        this.sendInteraction('email_click');
                    });
                });

                // Track general clicks
                document.addEventListener('click', () => {
                    this.clicks++;
                });
            }

            setupBeforeUnload() {
                window.addEventListener('beforeunload', () => {
                    this.sendFinalData();
                });

                document.addEventListener('visibilitychange', () => {
                    if (document.visibilityState === 'hidden') {
                        this.sendFinalData();
                    }
                });
            }

            sendHeartbeat() {
                setInterval(() => {
                    this.sendUpdateData();
                }, 30000);
            }

            updateDebugInfo() {
                setInterval(() => {
                    const viewTime = Math.round((new Date() - this.startTime) / 1000);
                    document.getElementById('debugSession').textContent = this.sessionToken.substr(-8);
                    document.getElementById('debugTime').textContent = viewTime + 's';
                    document.getElementById('debugScroll').textContent = this.maxScroll + '%';
                    document.getElementById('debugClicks').textContent = this.clicks;
                    document.getElementById('debugWhatsApp').textContent = this.interactions.whatsapp ? '✅' : '❌';
                    document.getElementById('debugEmail').textContent = this.interactions.email ? '✅' : '❌';
                }, 1000);
            }

            async sendInteraction(type) {
                try {
                    await fetch('/api/proposta/analytics/interaction', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            sessionToken: this.sessionToken,
                            interactionType: type,
                            timestamp: new Date().toISOString()
                        })
                    });
                } catch (error) {
                    console.warn('Interaction tracking failed:', error);
                }
            }

            async sendUpdateData() {
                const viewTime = Math.round((new Date() - this.startTime) / 1000);

                try {
                    await fetch('/api/proposta/analytics/update', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify({
                            sessionToken: this.sessionToken,
                            tempoVisualizacaoSegundos: viewTime,
                            scrollMaximoPercentual: this.maxScroll,
                            numeroCliques: this.clicks,
                            clicouWhatsApp: this.interactions.whatsapp,
                            clicouEmail: this.interactions.email
                        })
                    });
                } catch (error) {
                    console.warn('Update tracking failed:', error);
                }
            }

            sendFinalData() {
                const viewTime = Math.round((new Date() - this.startTime) / 1000);

                const data = {
                    sessionToken: this.sessionToken,
                    dataHoraFim: new Date().toISOString(),
                    tempoVisualizacaoSegundos: viewTime,
                    scrollMaximoPercentual: this.maxScroll,
                    numeroCliques: this.clicks,
                    clicouWhatsApp: this.interactions.whatsapp,
                    clicouEmail: this.interactions.email
                };

                if (navigator.sendBeacon) {
                    navigator.sendBeacon('/api/proposta/analytics/finish', JSON.stringify(data));
                } else {
                    fetch('/api/proposta/analytics/finish', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(data),
                        keepalive: true
                    }).catch(() => {});
                }
            }
        }

        // Funções globais
        function openLightbox(src, alt) {
            document.getElementById('lightboxImage').src = src;
            document.getElementById('lightboxImage').alt = alt;
            document.getElementById('lightbox').style.display = 'flex';
            document.body.style.overflow = 'hidden';
        }

        function closeLightbox() {
            document.getElementById('lightbox').style.display = 'none';
            document.body.style.overflow = 'auto';
        }

        function compartilharWhatsApp() {
            const url = window.location.href;
            const texto = `Confira esta proposta de viagem incrível: @Model.Titulo`;
            const whatsappUrl = `https://wa.me/?text=${encodeURIComponent(texto + ' ' + url)}`;
            window.open(whatsappUrl, '_blank');
        }

        function copiarLink() {
            const url = window.location.href;
            navigator.clipboard.writeText(url).then(() => {
                showNotification('Link copiado para a área de transferência!', 'success');
            }).catch(() => {
                showNotification('Erro ao copiar link. Tente novamente.', 'error');
            });
        }

        function showNotification(message, type) {
            const notification = document.createElement('div');
            notification.className = `alert alert-${type === 'success' ? 'success' : 'danger'} position-fixed`;
            notification.style.cssText = 'top: 20px; right: 20px; z-index: 9999; min-width: 300px;';
            notification.innerHTML = `
                <i class="fas fa-${type === 'success' ? 'check-circle' : 'exclamation-circle'} me-2"></i>
                ${message}
                <button type="button" class="btn-close" onclick="this.parentElement.remove()"></button>
            `;
            
            document.body.appendChild(notification);
            
            setTimeout(() => {
                if (notification.parentNode) {
                    notification.remove();
                }
            }, 5000);
        }

        function showAllPhotos(destinoId) {
            // Implementar modal para mostrar todas as fotos do destino
            alert('Funcionalidade em desenvolvimento: Galeria completa do destino');
        }

        function atualizarContadorVisualizacoes() {
            // Simular contador (em produção viria da API)
            const count = Math.floor(Math.random() * 100) + 25;
            document.getElementById('viewCount').textContent = `${count} visualizações`;
        }

        // Inicialização
        document.addEventListener('DOMContentLoaded', () => {
            const propostaId = '@Model.Id';
            window.analytics = new PropostaAnalytics(propostaId);
            atualizarContadorVisualizacoes();

            // Mostrar debug apenas em desenvolvimento
            if (window.location.hostname === 'localhost' || window.location.search.includes('debug=true')) {
                document.getElementById('analyticsDebug').style.display = 'block';
            }

            // Lazy loading para imagens
            if ('IntersectionObserver' in window) {
                const imageObserver = new IntersectionObserver((entries, observer) => {
                    entries.forEach(entry => {
                        if (entry.isIntersecting) {
                            const img = entry.target;
                            img.classList.remove('lazy');
                            observer.unobserve(img);
                        }
                    });
                });

                document.querySelectorAll('img[data-src]').forEach(img => {
                    imageObserver.observe(img);
                });
            }

            // Smooth scroll para âncoras internas
            document.querySelectorAll('a[href^="#"]').forEach(anchor => {
                anchor.addEventListener('click', function (e) {
                    e.preventDefault();
                    const target = document.querySelector(this.getAttribute('href'));
                    if (target) {
                        target.scrollIntoView({
                            behavior: 'smooth',
                            block: 'start'
                        });
                    }
                });
            });

            // Keyboard navigation para lightbox
            document.addEventListener('keydown', (e) => {
                if (e.key === 'Escape') {
                    closeLightbox();
                }
            });

            // Performance monitoring
            if ('performance' in window) {
                window.addEventListener('load', () => {
                    setTimeout(() => {
                        const perfData = performance.getEntriesByType('navigation')[0];
                        if (perfData) {
                            console.log('Page load time:', Math.round(perfData.loadEventEnd - perfData.loadEventStart), 'ms');
                        }
                    }, 0);
                });
            }
        });

        // Service Worker para cache (opcional)
        if ('serviceWorker' in navigator) {
            window.addEventListener('load', () => {
                navigator.serviceWorker.register('/sw.js')
                    .catch(err => console.log('SW registration failed'));
            });
        }

        // Detectar dispositivo móvel para otimizações
        const isMobile = /Android|webOS|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent);
        if (isMobile) {
            document.body.classList.add('mobile-device');
        }

        // Preload de imagens críticas
        function preloadImages() {
            const criticalImages = document.querySelectorAll('.destination-image, .hero img');
            criticalImages.forEach(img => {
                const link = document.createElement('link');
                link.rel = 'preload';
                link.as = 'image';
                link.href = img.src;
                document.head.appendChild(link);
            });
        }

        // Otimização de scroll performance
        let scrollTimer = null;
        window.addEventListener('scroll', () => {
            if (scrollTimer !== null) {
                clearTimeout(scrollTimer);
            }
            scrollTimer = setTimeout(() => {
                // Scroll ended
                document.body.classList.remove('scrolling');
            }, 150);
            
            document.body.classList.add('scrolling');
        }, { passive: true });
    </script>

    <!-- Schema.org structured data para SEO -->
    <script type="application/ld+json">
    {
        "@@context": "https://schema.org",
        "@@type": "TravelAgency",
        "name": "@Model.Usuario.Nome",
        "email": "@Model.Usuario.Email",
        "telephone": "@Model.Usuario.Telefone",
        "offers": {
            "@@type": "Offer",
            "name": "@Model.Titulo",
            "description": "@(Model.ObservacoesGerais ?? Model.Titulo)",
            "validFrom": "@Model.DataCriacao.ToString("yyyy-MM-dd")",
            @if (Model.DataExpiracaoLink.HasValue)
            {
                <text>"validThrough": "@Model.DataExpiracaoLink.Value.ToString("yyyy-MM-dd")",</text>
            }
            "itemOffered": {
                "@@type": "Trip",
                "name": "@Model.Titulo",
                @if (Model.DataInicio.HasValue)
                {
                    <text>"startDate": "@Model.DataInicio.Value.ToString("yyyy-MM-dd")",</text>
                }
                @if (Model.DataFim.HasValue)
                {
                    <text>"endDate": "@Model.DataFim.Value.ToString("yyyy-MM-dd")",</text>
                }
                "itinerary": [
                    @for (int i = 0; i < Model.Destinos.Count; i++)
                    {
                        var destino = Model.Destinos.ElementAt(i);
                        <text>
                        {
                            "@@type": "Place",
                            "name": "@destino.Nome",
                            @if (!string.IsNullOrEmpty(destino.Cidade))
                            {
                                <text>"address": "@destino.Cidade@(!string.IsNullOrEmpty(destino.Pais) ? ", " + destino.Pais : "")",</text>
                            }
                            "description": "@(destino.Descricao ?? destino.Nome)"
                        }@(i < Model.Destinos.Count - 1 ? "," : "")
                        </text>
                    }
                ]
            }
        }
    }
    </script>
</body>
</html>